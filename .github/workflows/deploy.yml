name: Deploy to EC2
on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때마다 실행

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 백엔드 Gradle 빌드
      - name: Build backend with Gradle
        run: |
          cd ./backend
          ./gradlew clean build -x test
          cd ..

      # Docker 빌드를 위한 환경 파일 생성
      - name: Create environment files
        run: |
          echo "${{ secrets.FRONTEND_ENV }}" > ./frontend/.env.local
          echo "${{ secrets.BACKEND_ENV }}" > ./backend/.env

      # 프론트엔드 Docker 이미지 빌드 및 푸시
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tripfriend-frontend:latest

      # 백엔드 Docker 이미지 빌드 및 푸시
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tripfriend-backend:latest

      # EC2에 SSH 접속하여 배포
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 환경 파일을 위한 디렉토리 생성
            mkdir -p ~/tripfriend/backend
            mkdir -p ~/tripfriend/frontend

            # 환경 파일 생성
            echo "${{ secrets.BACKEND_ENV }}" > ~/tripfriend/backend/.env
            echo "${{ secrets.FRONTEND_ENV }}" > ~/tripfriend/frontend/.env.local

            # 최신 Docker 이미지 다운로드
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tripfriend-frontend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tripfriend-backend:latest
            docker pull redis:latest

            # 기존 컨테이너가 있다면 중지 및 제거
            docker stop frontend backend redis || true
            docker rm frontend backend redis || true

            # Docker 네트워크 생성 (없는 경우)
            docker network inspect tripfriend-network >/dev/null 2>&1 || \
            docker network create tripfriend-network

            # Redis 컨테이너 실행
            docker run -d --name redis \
              --network tripfriend-network \
              redis:latest

            # 새 컨테이너 실행 (공통 네트워크에 연결)
            docker run -d --name backend -p 8080:8080 \
              --network tripfriend-network \
              --env-file ~/tripfriend/backend/.env \
              ${{ secrets.DOCKERHUB_USERNAME }}/tripfriend-backend:latest

            docker run -d --name frontend -p 3000:3000 \
              --network tripfriend-network \
              --env-file ~/tripfriend/frontend/.env.local \
              ${{ secrets.DOCKERHUB_USERNAME }}/tripfriend-frontend:latest

            # 컨테이너 실행 상태 확인
            docker ps

            # Nginx 리로드 (필요한 경우)
            sudo nginx -s reload || true
